name: ecr

on:
  push:
    branches:
      - main
      - master
env:
  IMAGE_NAME: {{cookiecutter.adapter_code}}

jobs:
  push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ '{{' }} secrets.AWS_ACCESS_KEY_ID {{ '}}' }}
          aws-secret-access-key: ${{ '{{' }} secrets.AWS_SECRET_ACCESS_KEY {{ '}}' }}
          aws-region: ${{ '{{' }} secrets.AWS_DEFAULT_REGION {{ '}}' }}
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ '{{' }} steps.login-ecr.outputs.registry {{ '}}' }}
          ECR_REPOSITORY: {{cookiecutter.adapter_code}}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ./Dockerfile.lambda -t $ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG}-lambda .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG}-lambda
          docker build -f ./Dockerfile.kubernetes -t $ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG}-kubernetes .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG}-kubernetes

      - name: Update Production Lambda
        env:
          ECR_REPOSITORY: {{cookiecutter.adapter_code}}
          LAMBDA_NAME: {{cookiecutter.adapter_code}}
          IMAGE_TAG: ${{ github.sha }}
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCOUNT_ID: {{cookiecutter.aws_account_id}}
        run: |
          aws lambda update-function-code --function-name $LAMBDA_NAME --image-uri $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:${IMAGE_TAG}-lambda

      - name: Remove Migrations
        run: aws s3 rm {{cookiecutter.adapter_migrations_uri}}/ --recursive

      - name: Upload Migrations
        run: aws s3 cp ./migrations/ {{cookiecutter.adapter_migrations_uri}}/ --recursive